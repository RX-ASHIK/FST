import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    JobQueue
)
import asyncio
from datetime import datetime
import pytz

# ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶®
BOT_TOKEN = "7641873839:AAHt4JsRYUMQDHrrEHdOB-No3ZrtJQeDxXc"
ADMIN_ID = 5989402185
CHANNEL_USERNAME = "@EarningMasterbd24"  # @ ‡¶∏‡¶π ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶®‡ßá‡¶Æ
MINI_APP_URL = "https://earningmaster244.blogspot.com/?m=1"
NOTIFICATION_INTERVAL = 300  # 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü
TIMEZONE = pytz.timezone('Asia/Dhaka')

# ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞‡ßá‡¶ú
user_data = {}
active_users = set()

# ‡¶≤‡¶ó‡¶ø‡¶Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def is_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ"""
    try:
        member = await context.bot.get_chat_member(
            chat_id=CHANNEL_USERNAME,
            user_id=user_id
        )
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking membership: {e}")
        return False

async def enforce_membership(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®"""
    user = update.effective_user
    user_id = user.id
    
    if user_id == ADMIN_ID:
        return True
    
    if not await is_member(user_id, context):
        keyboard = [
            [InlineKeyboardButton("üîó ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("üîÑ ‡¶ú‡ßü‡ßá‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="verify_join")]
        ]
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è *‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶°‡¶ø‡¶®‡¶æ‡¶á‡¶°*\n\n"
                 "‡¶è‡¶á ‡¶¨‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá:\n"
                 f"{CHANNEL_USERNAME}\n\n"
                 "‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if not await enforce_membership(update, context):
        return
    
    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
    if user_id not in user_data:
        user_data[user_id] = {
            'first_name': user.first_name,
            'join_date': datetime.now(TIMEZONE),
            'verified': True
        }
        active_users.add(user_id)
    
    if user_id == ADMIN_ID:
        # ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏
        keyboard = [
            [InlineKeyboardButton("üìä ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°", callback_data="admin_dashboard")],
            [InlineKeyboardButton("üöÄ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ì‡¶™‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", web_app=WebAppInfo(url=MINI_APP_URL))]
        ]
        await update.message.reply_text(
            text=f"üëë *‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°*\n\n"
                 f"‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ {user.first_name}!\n"
                 f"‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡ßü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {len(active_users)}",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # ‡¶®‡¶∞‡¶Æ‡¶æ‡¶≤ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶´‡ßá‡¶∏
        button = InlineKeyboardButton(
            "üí∞ ‡¶Ü‡ßü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", 
            web_app=WebAppInfo(url=MINI_APP_URL)
        )
        await update.message.reply_text(
            text=f"üåü *‡¶á‡ßü‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ*\n\n"
                 f"‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã {user.first_name}, ‡¶Ü‡ßü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[button]])
        )

async def verify_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ú‡ßü‡ßá‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()
    
    if await is_member(user_id, context):
        user_data[user_id]['verified'] = True
        active_users.add(user_id)
        
        button = InlineKeyboardButton(
            "üöÄ ‡¶Ü‡ßü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", 
            web_app=WebAppInfo(url=MINI_APP_URL)
        )
        await query.edit_message_text(
            text="‚úÖ *‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶´‡¶≤*\n\n"
                 "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶á‡ßü‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶Æ‡¶æ‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®!",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup([[button]])
        )
    else:
        await query.answer("‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!", show_alert=True)

async def send_notifications(context: ContextTypes.DEFAULT_TYPE):
    """‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ"""
    for user_id in list(active_users):
        try:
            if not user_data.get(user_id, {}).get('verified', False):
                continue
                
            button = InlineKeyboardButton(
                "‚ö° ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®", 
                web_app=WebAppInfo(url=MINI_APP_URL)
            )
            await context.bot.send_message(
                chat_id=user_id,
                text="üïí *‡¶Ü‡ßü‡ßá‡¶∞ ‡¶∏‡ßá‡¶∞‡¶æ ‡¶∏‡¶Æ‡ßü ‡¶è‡¶ñ‡¶®‡¶á!*",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([[button]])
            )
        except Exception as e:
            logger.error(f"Error sending notification to {user_id}: {e}")

def main():
    # ‡¶¨‡¶ü ‡¶á‡¶®‡¶ø‡¶∂‡¶ø‡ßü‡¶æ‡¶≤‡¶æ‡¶á‡¶ú‡ßá‡¶∂‡¶®
    application = Application.builder().token(BOT_TOKEN).build()
    
    # ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(verify_join, pattern="^verify_join$"))
    application.add_handler(CallbackQueryHandler(start, pattern="^admin_dashboard$"))
    
    # ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ú‡¶¨ ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
    job_queue = application.job_queue
    job_queue.run_repeating(
        send_notifications,
        interval=NOTIFICATION_INTERVAL,
        first=10
    )
    
    # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®
    application.run_polling()

if __name__ == "__main__":
    main()
