# -*- coding: utf-8 -*-
"""
ЁЯТ░ EARNING MASTER BOT - ржмрж╛ржВрж▓рж╛/English Mixed Version
ЁЯУ▒ Version: 10.0 | Codename: "Bilingual Earner"
"""

import asyncio
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Configuration
BOT_TOKEN = "7641873839:AAHt4JsRYUMQDHrrEHdOB-No3ZrtJQeDxXc"
MINI_APP_URL = "https://earningmaster244.blogspot.com/?m=1"
SUPPORT_USERNAME = "@EarningMaster_help"

class EarningMasterBot:
    def __init__(self):
        self.db = sqlite3.connect('earning_master.db')
        self.create_tables()
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def create_tables(self):
        cursor = self.db.cursor()
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_name TEXT,
            last_name TEXT,
            join_date TEXT
        )
        ''')
        self.db.commit()
    
    async def send_initial_notifications(self):
        """ржмржЯ рж╢рзБрж░рзБ рж╣рж▓рзЗ рж╕ржХрж▓ ржЗржЙржЬрж╛рж░ржХрзЗ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛ"""
        cursor = self.db.cursor()
        cursor.execute("SELECT user_id, first_name FROM users")
        users = cursor.fetchall()
        
        bot = Bot(token=BOT_TOKEN)
        
        for user_id, first_name in users:
            try:
                keyboard = [
                    [InlineKeyboardButton("ЁЯУ▒ ржорж┐ржирж┐ ржЕрзНржпрж╛ржк ржЦрзБрж▓рзБржи", web_app={"url": MINI_APP_URL})],
                    [InlineKeyboardButton("ЁЯУК ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб", callback_data="dashboard")],
                    [InlineKeyboardButton("ЁЯЫОя╕П рж╕рж╛ржкрзЛрж░рзНржЯ", url=f"https://t.me/{SUPPORT_USERNAME[1:]}")]
                ]
                
                await bot.send_message(
                    chat_id=user_id,
                    text=f"ЁЯМЯ <b>ржирждрзБржи ржЖржкржбрзЗржЯ!</b> ЁЯМЯ\n\n"
                         f"рж╣рзНржпрж╛рж▓рзЛ {first_name}!\n"
                         "ржЖржорж╛ржжрзЗрж░ рж╕рж┐рж╕рзНржЯрзЗржо ржЖржкржЧрзНрж░рзЗржб ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ\n\n"
                         "тЬЕ ржирждрзБржи рж╕рзБржпрзЛржЧрж╕ржорзВрж╣:\n"
                         "тЦля╕П ржмрзЗрж╢рж┐ ржЗржиржХрж╛ржо\n"
                         "тЦля╕П ржжрзНрж░рзБржд ржЙрждрзНрждрзЛрж▓ржи\n"
                         "тЦля╕П ржирждрзБржи ржЯрж╛рж╕рзНржХ\n\n"
                         "<i>Start earning now with better rewards!</i>",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
                
            except Exception as e:
                logging.error(f"Failed to send notification to {user_id}: {str(e)}")
    
    def setup_handlers(self):
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CallbackQueryHandler(self.button_handler))
        self.application.add_handler(CommandHandler("support", self.support))
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self._register_user(user)
        
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▒ ржорж┐ржирж┐ ржЕрзНржпрж╛ржк ржЦрзБрж▓рзБржи", callback_data="open_miniapp")],
            [InlineKeyboardButton("ЁЯУК ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб", callback_data="dashboard")],
            [InlineKeyboardButton("ЁЯЫОя╕П Customer Support", url=f"https://t.me/{SUPPORT_USERNAME[1:]}")]
        ]
        
        await update.message.reply_text(
            "ЁЯМЯ <b>Earning Master ржП рж╕рзНржмрж╛ржЧрждржо!</b> ЁЯМЯ\n\n"
            "ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржЯрж╛ржХрж╛ ржЙржкрж╛рж░рзНржЬржи ржХрж░рзБржи:\n"
            "тЦля╕П ржорж┐ржирж┐ ржЕрзНржпрж╛ржк ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ\n"
            "тЦля╕П ржмрж┐ржнрж┐ржирзНржи ржЯрж╛рж╕рзНржХ рж╕ржорзНржкржирзНржи ржХрж░рзЗ\n\n"
            "<i>Start your earning journey today!</i>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == "open_miniapp":
            await self.open_mini_app(update, context)
        elif query.data == "dashboard":
            await self.show_dashboard(update, context)
    
    async def open_mini_app(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▒ Open Mini App Now", web_app={"url": MINI_APP_URL})],
            [InlineKeyboardButton("ЁЯФЩ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржбрзЗ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="dashboard")]
        ]
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="ЁЯЪА <b>ржорж┐ржирж┐ ржЕрзНржпрж╛ржк ржЗржиржХрж╛ржо рж╕рж┐рж╕рзНржЯрзЗржо</b> ЁЯЪА\n\n"
                 "ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржкрж╛ржмрзЗржи:\n"
                 "тЦля╕П ржЕрждрж┐рж░рж┐ржХрзНржд ржЗржиржХрж╛ржорзЗрж░ рж╕рзБржпрзЛржЧ\n"
                 "тЦля╕П рж╕рзНржкрзЗрж╢рж╛рж▓ ржмрзЛржирж╛рж╕\n\n"
                 "<i>Click below to open the mini app</i>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def show_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("ЁЯУ▒ ржорж┐ржирж┐ ржЕрзНржпрж╛ржк", callback_data="open_miniapp")],
            [InlineKeyboardButton("ЁЯЫОя╕П рж╕рж╛ржкрзЛрж░рзНржЯ", url=f"https://t.me/{SUPPORT_USERNAME[1:]}")],
            [InlineKeyboardButton("ЁЯТ╝ Earnings Report", callback_data="earnings")]
        ]
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="ЁЯУК <b>ржЖржкржирж╛рж░ ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб</b> ЁЯУК\n\n"
                 "ЁЯТ░ ржмрж░рзНрждржорж╛ржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕: 0.00 BDT\n"
                 "ЁЯУ▒ ржорж┐ржирж┐ ржЕрзНржпрж╛ржк ржЗржиржХрж╛ржо: 0.00 BDT\n\n"
                 "<i>Last updated: Just now</i>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    
    async def support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ЁЯЫОя╕П <b>рж╕рж╛ржкрзЛрж░рзНржЯ рж╕рж┐рж╕рзНржЯрзЗржо</b> ЁЯЫОя╕П\n\n"
            f"ржпрзЗржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛рзЯ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи: {SUPPORT_USERNAME}\n"
            "ржЖржорж░рж╛ рзирзк/рзн ржЖржкржирж╛рж░ рж╕рзЗржмрж╛рзЯ ржЖржЫрж┐ред\n\n"
            "<i>Our support team is always ready to help you!</i>",
            parse_mode='HTML'
        )
    
    def _register_user(self, user):
        """ржирждрзБржи ржЗржЙржЬрж╛рж░ рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рж╛"""
        cursor = self.db.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO users (user_id, first_name, last_name, join_date) VALUES (?, ?, ?, ?)",
            (user.id, user.first_name, user.last_name, datetime.now().isoformat())
        )
        self.db.commit()

def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    bot = EarningMasterBot()
    
    # Send notifications when bot starts
    asyncio.get_event_loop().run_until_complete(bot.send_initial_notifications())
    
    bot.application.run_polling()

if __name__ == "__main__":
    main()
