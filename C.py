import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    WebAppInfo
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    JobQueue
)
import asyncio
from datetime import datetime
import pytz

# ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи
BOT_TOKEN = "7641873839:AAHt4JsRYUMQDHrrEHdOB-No3ZrtJQeDxXc"
ADMIN_ID = 5989402185
CHANNEL_USERNAME = "@EarningMasterbd24"  # @ ржЪрж┐рж╣рзНржирж╕рж╣
MINI_APP_URL = "https://earningmaster244.blogspot.com/?m=1"
NOTIFICATION_INTERVAL = 300  # 5 ржорж┐ржирж┐ржЯ
TIMEZONE = pytz.timezone('Asia/Dhaka')

# ржбрж╛ржЯрж╛ рж╕рзНржЯрзЛрж░рзЗржЬ
user_data = {}
active_users = set()

# рж▓ржЧрж┐ржВ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def is_member(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """ржЪрзЗржХ ржХрж░рзЗ ржЗржЙржЬрж╛рж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬрзЯрзЗржи ржХрж░рзЗржЫрзЗ ржХрж┐ржирж╛"""
    try:
        member = await context.bot.get_chat_member(
            chat_id=CHANNEL_USERNAME,
            user_id=user_id
        )
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Error checking membership: {e}")
        return False

async def send_welcome_message(user_id: int, context: ContextTypes.DEFAULT_TYPE, first_name: str):
    """рж╕рзБржирзНржжрж░ ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржирзЛ"""
    welcome_text = f"""
тЬи *рж╕рзНржмрж╛ржЧрждржо {first_name}!* тЬи

ЁЯОЙ ржЗрзЯрж╛рж░рзНржирж┐ржВ ржорж╛рж╕рзНржЯрж╛рж░ ржХржорж┐ржЙржирж┐ржЯрж┐рждрзЗ ржЖржкржирж╛ржХрзЗ рж╕рзНржмрж╛ржЧрждржо!

ЁЯТ░ ржкрзНрж░рждрж┐ржжрж┐ржи ржЖрзЯ ржХрж░рзБржи ржЖржорж╛ржжрзЗрж░ ржмрж┐рж╢рзЗрж╖ рж╕рж┐рж╕рзНржЯрзЗржорзЗ

ЁЯЪА рж╢рзБрж░рзБ ржХрж░рждрзЗ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:
"""
    
    keyboard = [
        [InlineKeyboardButton(
            "ЁЯЪА ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи", 
            web_app=WebAppInfo(url=MINI_APP_URL)
        )]
    ]
    
    await context.bot.send_message(
        chat_id=user_id,
        text=welcome_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # ржПржбржорж┐ржи ржЪрзЗржХ
    if user_id == ADMIN_ID:
        admin_text = f"""
ЁЯСС *ржЕрзНржпрж╛ржбржорж┐ржи ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб* ЁЯСС

рж╕рзНржмрж╛ржЧрждржо {user.first_name}!

ЁЯУК рж╕ржХрзНрж░рж┐ржпрж╝ ржЗржЙржЬрж╛рж░: {len(active_users)}
ЁЯХТ рж╢рзЗрж╖ ржЖржкржбрзЗржЯ: {datetime.now(TIMEZONE).strftime("%I:%M %p")}
"""
        keyboard = [
            [InlineKeyboardButton("ЁЯУК рж╕рзНржЯрзНржпрж╛ржЯрж╕", callback_data="admin_stats")],
            [InlineKeyboardButton("ЁЯЪА ржУржпрж╝рзЗржмржЕрзНржпрж╛ржк", web_app=WebAppInfo(url=MINI_APP_URL))]
        ]
        
        await update.message.reply_text(
            text=admin_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # ржЪрзНржпрж╛ржирзЗрж▓ ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи
    if not await is_member(user_id, context):
        join_text = f"""
тЪая╕П *ржкрзНрж░рж┐ржпрж╝ {user.first_name}* тЪая╕П

ржПржЗ ржмржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржЖржкржирж╛ржХрзЗ ржЕржмрж╢рзНржпржЗ ржЖржорж╛ржжрзЗрж░ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рждрзЗ рж╣ржмрзЗ:

ЁЯФЧ {CHANNEL_USERNAME}

тЬЕ ржЬржпрж╝рзЗржи ржХрж░рж╛рж░ ржкрж░ ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи:
"""
        keyboard = [
            [InlineKeyboardButton("ЁЯФЧ ржЪрзНржпрж╛ржирзЗрж▓ ржЬржпрж╝рзЗржи ржХрж░рзБржи", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("ЁЯФД ржнрзЗрж░рж┐ржлрж╛ржЗ ржХрж░рзБржи", callback_data="verify_join")]
        ]
        
        await update.message.reply_text(
            text=join_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # ржЗржЙржЬрж╛рж░ ржбрж╛ржЯрж╛ рж╕рзНржЯрзЛрж░
    if user_id not in user_data:
        user_data[user_id] = {
            'first_name': user.first_name,
            'join_date': datetime.now(TIMEZONE),
            'verified': True
        }
        active_users.add(user_id)
    
    # ржУрзЯрзЗрж▓ржХрж╛ржо ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржи
    await send_welcome_message(user_id, context, user.first_name)

async def verify_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ржЬрзЯрзЗржи ржнрзЗрж░рж┐ржлрж┐ржХрзЗрж╢ржи"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()
    
    if await is_member(user_id, context):
        user_data[user_id] = {
            'first_name': query.from_user.first_name,
            'join_date': datetime.now(TIMEZONE),
            'verified': True
        }
        active_users.add(user_id)
        
        await send_welcome_message(user_id, context, query.from_user.first_name)
        await query.delete_message()
    else:
        await query.answer("тЭМ ржЖржкржирж┐ ржПржЦржиржУ ржЪрзНржпрж╛ржирзЗрж▓рзЗ ржЬржпрж╝рзЗржи ржХрж░рзЗржиржирж┐!", show_alert=True)

async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    """ржбрзЗржЗрж▓рж┐ рж░рж┐ржорж╛ржЗржирзНржбрж╛рж░"""
    for user_id in list(active_users):
        try:
            reminder_text = f"""
тП░ *ржЖржпрж╝рзЗрж░ рж╕ржоржпрж╝ ржПрж╕рзЗржЫрзЗ!* тП░

{user_data[user_id]['first_name']}, ржЖржЬржХрзЗ ржЖржкржирж╛рж░ ржЖржпрж╝ рж╢рзБрж░рзБ ржХрж░рзБржи!

ЁЯТ░ ржкрзНрж░рждрж┐ рзл ржорж┐ржирж┐ржЯрзЗ ржирждрзБржи ржЖржпрж╝рзЗрж░ рж╕рзБржпрзЛржЧ
"""
            keyboard = [
                [InlineKeyboardButton(
                    "тЪб ржПржЦржиржЗ рж╢рзБрж░рзБ ржХрж░рзБржи", 
                    web_app=WebAppInfo(url=MINI_APP_URL)
                )]
            ]
            
            await context.bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error sending reminder to {user_id}: {e}")

def main():
    # ржмржЯ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рзБржи
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(verify_join, pattern="^verify_join$"))
    
    # ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи рж╕рзЗржЯржЖржк
    job_queue = application.job_queue
    job_queue.run_repeating(
        send_daily_reminder,
        interval=NOTIFICATION_INTERVAL,
        first=10
    )
    
    # ржмржЯ рж╢рзБрж░рзБ ржХрж░рзБржи
    application.run_polling()

if __name__ == "__main__":
    main()
